---
title: Programa√ß√£o Ass√≠ncrona Avan√ßada e Metaprograma√ß√£o em Python
date: 2024-08-01 # Data de publica√ß√£o (ajuste conforme necess√°rio)
description: Um guia completo sobre como usar asyncio para programar de forma n√£o bloqueante e como explorar o poder da metaprograma√ß√£o com Python.
tags:
  - Python
  - Asyncio
  - Metaprograma√ß√£o
  - Corrotinas
  - Descriptors
  - AST
---


# Programa√ß√£o Ass√≠ncrona Avan√ßada e Metaprograma√ß√£o em Python

Este documento explora t√©cnicas avan√ßadas de programa√ß√£o ass√≠ncrona com `asyncio` e conceitos sofisticados de metaprograma√ß√£o em Python, com exemplos pr√°ticos e explica√ß√µes detalhadas para cada caso.

---

## üïê Cancelamento de Tarefas

Permite interromper uma tarefa que n√£o precisa mais ser executada. √ötil em sistemas reativos ou que precisam otimizar recursos.

```python
import asyncio

async def tarefa_longa():
    print("A iniciar tarefa longa")
    try:
        await asyncio.sleep(10)
    except asyncio.CancelledError:
        print("Tarefa longa cancelada")
        raise
    print("Tarefa longa conclu√≠da")
    return "Resultado da tarefa longa"

async def main():
    tarefa = asyncio.create_task(tarefa_longa())
    await asyncio.sleep(2)
    print("A cancelar tarefa")
    tarefa.cancel()
    try:
        await tarefa
    except asyncio.CancelledError:
        print("Tarefa principal: tarefa foi cancelada")

if __name__ == "__main__":
    asyncio.run(main())
```

**Explica√ß√£o**:
- `create_task()` agenda uma coroutine para rodar em segundo plano.
- `cancel()` emite um sinal de cancelamento.
- A exce√ß√£o `CancelledError` permite capturar esse cancelamento e reagir apropriadamente.

---

## ‚è±Ô∏è Timeouts com `asyncio.wait_for`

Controla o tempo de espera de uma coroutine. Se ela demorar demais, √© cancelada automaticamente.

```python
async def tarefa_demorada():
    await asyncio.sleep(5)
    return "Resultado"

async def main():
    try:
        resultado = await asyncio.wait_for(tarefa_demorada(), timeout=2)
        print(f"Resultado: {resultado}")
    except asyncio.TimeoutError:
        print("Tempo de espera excedido!")
```

**Explica√ß√£o**:
- √ötil para prevenir travamentos ou lentid√£o em chamadas de rede ou I/O.
- `TimeoutError` pode ser tratado como fallback ou retry.

---

## ‚ö° Tratamento de Exce√ß√µes em Corrotinas

Erros acontecem ‚Äî e precisam ser capturados para n√£o comprometer o loop de eventos.

```python
async def tarefa_com_erro():
    raise ValueError("Ocorreu um erro na tarefa")

async def main():
    try:
        await tarefa_com_erro()
    except ValueError as e:
        print(f"Erro capturado: {e}")
```

**Explica√ß√£o**:
- Sempre trate exce√ß√µes ao usar `await` para manter o controle da aplica√ß√£o.

---

## ‚ú® Corrotinas dentro de Corrotinas

Permite criar fluxos ass√≠ncronos mais complexos e encadeados.

```python
async def tarefa1():
    print("Tarefa 1 iniciada")
    await asyncio.sleep(1)
    print("Tarefa 1 conclu√≠da")
    return "Resultado 1"

async def tarefa2():
    print("Tarefa 2 iniciada")
    await asyncio.sleep(2)
    print("Tarefa 2 conclu√≠da")
    return "Resultado 2"

async def main():
    resultado1 = await tarefa1()
    resultado2 = await tarefa2()
    print(f"Resultados: {resultado1}, {resultado2}")
```

**Explica√ß√£o**:
- Cada coroutine pode aguardar outras, permitindo controle total da ordem de execu√ß√£o.

---

## üåê Async Generators

Gera√ß√£o ass√≠ncrona de valores ‚Äî ideal para grandes volumes de dados ou streams.

```python
async def gerar_numeros(maximo):
    numero = 0
    while numero < maximo:
        yield numero
        numero += 1
        await asyncio.sleep(0.5)

async def main():
    async for numero in gerar_numeros(5):
        print(f"N√∫mero: {numero}")
```

**Explica√ß√£o**:
- `yield` em conjunto com `await` permite produzir dados em tempo real sem bloquear a aplica√ß√£o.

---

## üîÆ Dicas e Truques com `asyncio`

- **`gather()`**: executa v√°rias tarefas ao mesmo tempo.
- **`to_thread()`**: roda fun√ß√µes bloqueantes em uma thread separada.
- **`get_event_loop()`**: acesso manual ao loop para controle fino.
- **Use bibliotecas ass√≠ncronas**: como `aiohttp`, `aiomysql`, `aiosqlite`, etc.

---

*(continua com metaprograma√ß√£o conforme j√° estruturado acima)*
